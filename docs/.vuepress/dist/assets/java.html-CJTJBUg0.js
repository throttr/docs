import{_ as n,c as a,a as e,o as p}from"./app-BgH2enP9.js";const t={};function c(o,s){return p(),a("div",null,s[0]||(s[0]=[e(`<h1 id="java" tabindex="-1"><a class="header-anchor" href="#java"><span>Java</span></a></h1><h2 id="installation" tabindex="-1"><a class="header-anchor" href="#installation"><span>Installation</span></a></h2><p>Add the dependency to your <code>pom.xml</code>:</p><div class="language-xml line-numbers-mode" data-highlighter="prismjs" data-ext="xml"><pre><code class="language-xml"><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>cl.throttr<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>sdk<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>4.1.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Make sure to configure your Maven repositories to include GitHub Packages if needed.</p><h2 id="basic-usage" tabindex="-1"><a class="header-anchor" href="#basic-usage"><span>Basic Usage</span></a></h2><h3 id="get-connected" tabindex="-1"><a class="header-anchor" href="#get-connected"><span>Get Connected</span></a></h3><p>Use the Service to create a communication channel between your application and Throttr server.</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">cl<span class="token punctuation">.</span>throttr<span class="token punctuation">.</span>enums<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">cl<span class="token punctuation">.</span>throttr<span class="token punctuation">.</span>requests<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">cl<span class="token punctuation">.</span>throttr<span class="token punctuation">.</span>responses<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token class-name">String</span> <span class="token constant">HOST</span> <span class="token operator">=</span> <span class="token string">&quot;127.0.0.1&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">int</span> <span class="token constant">PORT</span> <span class="token operator">=</span> <span class="token number">9000</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">int</span> <span class="token constant">MAX_CONNECTIONS</span> <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">ValueSize</span> <span class="token constant">DYNAMIC_VALUE_SIZE</span> <span class="token operator">=</span> <span class="token class-name">ValueSize</span><span class="token punctuation">.</span><span class="token constant">UINT16</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token class-name">Service</span> service <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Service</span><span class="token punctuation">(</span></span>
<span class="line">    <span class="token constant">HOST</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token constant">PORT</span><span class="token punctuation">,</span> </span>
<span class="line">    <span class="token constant">DYNAMIC_VALUE_SIZE</span><span class="token punctuation">,</span> </span>
<span class="line">    <span class="token constant">MAX_CONNECTIONS</span></span>
<span class="line"><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"> </span>
<span class="line">service<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>After that, <code>service</code> will be a instance that can be used in concurrently.</p><p>Every connection contained in service has his own requests resolve promise queue. This guarantees that every single request make against the server will be resolved one by one. Even, if you sent it as batch.</p><p>Requests <strong>can fail</strong>, mainly, for external causes. I/O, Network stability and so on. Using <code>try / catch</code> is recommended.</p><h3 id="sending-requests" tabindex="-1"><a class="header-anchor" href="#sending-requests"><span>Sending Requests</span></a></h3><p>The following operations are based in Throttr protocol <code>v5.0.0</code>.</p><h4 id="insert" tabindex="-1"><a class="header-anchor" href="#insert"><span>INSERT</span></a></h4><p>If you want to create a <code>counter</code> to track requests or metrics. Then <code>INSERT</code> is for you.</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">cl<span class="token punctuation">.</span>throttr<span class="token punctuation">.</span>enums<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">cl<span class="token punctuation">.</span>throttr<span class="token punctuation">.</span>requests<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">cl<span class="token punctuation">.</span>throttr<span class="token punctuation">.</span>responses<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token class-name">String</span> <span class="token constant">KEY</span> <span class="token operator">=</span> <span class="token string">&quot;NON_EXISTING_KEY&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">int</span> <span class="token constant">QUOTA</span> <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">int</span> <span class="token constant">TTL</span> <span class="token operator">=</span> <span class="token number">60</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">TTLType</span> <span class="token constant">TTL_TYPE</span> <span class="token operator">=</span> <span class="token class-name">TTLType</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token class-name">StatusResponse</span> response <span class="token operator">=</span> service<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span></span>
<span class="line">    <span class="token keyword">new</span> <span class="token class-name">InsertRequest</span><span class="token punctuation">(</span></span>
<span class="line">        <span class="token constant">QUOTA</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token constant">TTL_TYPE</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token constant">TTL</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token constant">KEY</span></span>
<span class="line">    <span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Status: &quot;</span> <span class="token operator">+</span> response<span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>There are only one condition that <code>success</code> can be <code>false</code>, and is, when the <code>key</code> already exists.</p><h4 id="query" tabindex="-1"><a class="header-anchor" href="#query"><span>QUERY</span></a></h4><p>If you want to recover the <code>counter</code> value or TTL specification. Then <code>QUERY</code> is for you.</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">cl<span class="token punctuation">.</span>throttr<span class="token punctuation">.</span>enums<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">cl<span class="token punctuation">.</span>throttr<span class="token punctuation">.</span>requests<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">cl<span class="token punctuation">.</span>throttr<span class="token punctuation">.</span>responses<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token class-name">String</span> <span class="token constant">KEY</span> <span class="token operator">=</span> <span class="token string">&quot;EXISTING_KEY&quot;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token class-name">QueryResponse</span> response <span class="token operator">=</span> service<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span></span>
<span class="line">    <span class="token keyword">new</span> <span class="token class-name">QueryRequest</span><span class="token punctuation">(</span></span>
<span class="line">        <span class="token constant">KEY</span></span>
<span class="line">    <span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Status: &quot;</span> <span class="token operator">+</span> response<span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Quota: &quot;</span> <span class="token operator">+</span> response<span class="token punctuation">.</span><span class="token function">quota</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;TTL Type: &quot;</span> <span class="token operator">+</span> response<span class="token punctuation">.</span><span class="token function">ttlType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;TTL: &quot;</span> <span class="token operator">+</span> response<span class="token punctuation">.</span><span class="token function">ttl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>There are only one condition that <code>success</code> can be <code>false</code>, and is, when the <code>key</code> doesn&#39;t exist.</p><p>In that case, <code>quota</code>, <code>ttl</code> and <code>ttlType</code> will contain <code>invalid</code> values.</p><h4 id="update" tabindex="-1"><a class="header-anchor" href="#update"><span>UPDATE</span></a></h4><p>If you want to modify the <code>counter</code> value or TTL. Then <code>UPDATE</code> is for you.</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">cl<span class="token punctuation">.</span>throttr<span class="token punctuation">.</span>enums<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">cl<span class="token punctuation">.</span>throttr<span class="token punctuation">.</span>requests<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">cl<span class="token punctuation">.</span>throttr<span class="token punctuation">.</span>responses<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token class-name">String</span> <span class="token constant">KEY</span> <span class="token operator">=</span> <span class="token string">&quot;EXISTING_KEY&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">int</span> <span class="token constant">VALUE</span> <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">AttributeType</span> <span class="token constant">ATTRIBUTE_TYPE</span> <span class="token operator">=</span> <span class="token class-name">AttributeType</span><span class="token punctuation">.</span><span class="token constant">QUOTA</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">ChangeType</span> <span class="token constant">CHANGE_TYPE</span> <span class="token operator">=</span> <span class="token class-name">ChangeType</span><span class="token punctuation">.</span><span class="token constant">DECREASE</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token class-name">StatusResponse</span> response <span class="token operator">=</span> service<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span></span>
<span class="line">    <span class="token keyword">new</span> <span class="token class-name">UpdateRequest</span><span class="token punctuation">(</span></span>
<span class="line">        <span class="token constant">ATTRIBUTE_TYPE</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token constant">CHANGE_TYPE</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token constant">VALUE</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token constant">KEY</span></span>
<span class="line">    <span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Status: &quot;</span> <span class="token operator">+</span> response<span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>There are two attributes that can be modified <code>Quota</code> and <code>TTL</code>.</p><p>There are three change type that can be invoked:</p><ul><li><code>PATCH</code> to replace the value.</li><li><code>INCREASE</code> to extend the quota or increase the metric.</li><li><code>DECREASE</code> to consume the quota or decrease the metric.</li></ul><p>There are two different cases that <code>success</code> can be <code>false</code>:</p><ul><li><code>Key</code> doesn&#39;t exists.</li><li><code>Quota</code> is less than the value that want to be reduced. IE: Quota is 20, but you want to <code>DECREASE</code> 50.</li></ul><p>The last case is relevant because you can combine <code>INSERT</code> + <code>UPDATE</code> as pattern.</p><h4 id="purge" tabindex="-1"><a class="header-anchor" href="#purge"><span>PURGE</span></a></h4><p>If you want, manually, remove the <code>counter</code> or <code>buffer</code>. Then <code>PURGE</code> is for you.</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">cl<span class="token punctuation">.</span>throttr<span class="token punctuation">.</span>enums<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">cl<span class="token punctuation">.</span>throttr<span class="token punctuation">.</span>requests<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">cl<span class="token punctuation">.</span>throttr<span class="token punctuation">.</span>responses<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token class-name">String</span> <span class="token constant">KEY</span> <span class="token operator">=</span> <span class="token string">&quot;EXISTING_KEY&quot;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token class-name">StatusResponse</span> response <span class="token operator">=</span> service<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span></span>
<span class="line">    <span class="token keyword">new</span> <span class="token class-name">PurgeRequest</span><span class="token punctuation">(</span></span>
<span class="line">        <span class="token constant">KEY</span></span>
<span class="line">    <span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Status: &quot;</span> <span class="token operator">+</span> response<span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>There are only one condition that <code>success</code> can be <code>false</code>, and is, when the <code>key</code> doesn&#39;t exist.</p><h4 id="set" tabindex="-1"><a class="header-anchor" href="#set"><span>SET</span></a></h4><p>If you want, create a <code>buffer</code> (arbitrary data in memory). Then <code>SET</code> is for you.</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">cl<span class="token punctuation">.</span>throttr<span class="token punctuation">.</span>enums<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">cl<span class="token punctuation">.</span>throttr<span class="token punctuation">.</span>requests<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">cl<span class="token punctuation">.</span>throttr<span class="token punctuation">.</span>responses<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token class-name">String</span> <span class="token constant">KEY</span> <span class="token operator">=</span> <span class="token string">&quot;NON_EXISTING_KEY&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">String</span> <span class="token constant">VALUE</span> <span class="token operator">=</span> <span class="token string">&quot;EHLO&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">int</span> <span class="token constant">TTL</span> <span class="token operator">=</span> <span class="token number">24</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">TTLType</span> <span class="token constant">TTL_TYPE</span> <span class="token operator">=</span> <span class="token class-name">TTLType</span><span class="token punctuation">.</span><span class="token constant">HOURS</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token class-name">StatusResponse</span> response <span class="token operator">=</span> service<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span></span>
<span class="line">    <span class="token keyword">new</span> <span class="token class-name">SetRequest</span><span class="token punctuation">(</span></span>
<span class="line">        <span class="token constant">TTL_TYPE</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token constant">TTL</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token constant">KEY</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token constant">VALUE</span></span>
<span class="line">    <span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Status: &quot;</span> <span class="token operator">+</span> response<span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>There are only one condition that <code>success</code> can be <code>false</code>, and is, when the <code>key</code> already exist.</p><h4 id="get" tabindex="-1"><a class="header-anchor" href="#get"><span>GET</span></a></h4><p>If you want, recover a <code>buffer</code>. Then <code>GET</code> is for you.</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">cl<span class="token punctuation">.</span>throttr<span class="token punctuation">.</span>enums<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">cl<span class="token punctuation">.</span>throttr<span class="token punctuation">.</span>requests<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">cl<span class="token punctuation">.</span>throttr<span class="token punctuation">.</span>responses<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token class-name">String</span> <span class="token constant">KEY</span> <span class="token operator">=</span> <span class="token string">&quot;EXISTING_KEY&quot;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token class-name">GetResponse</span> response <span class="token operator">=</span> service<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span></span>
<span class="line">    <span class="token keyword">new</span> <span class="token class-name">GetRequest</span><span class="token punctuation">(</span></span>
<span class="line">        <span class="token constant">KEY</span></span>
<span class="line">    <span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Status: &quot;</span> <span class="token operator">+</span> response<span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;TTL Type: &quot;</span> <span class="token operator">+</span> response<span class="token punctuation">.</span><span class="token function">ttlType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;TTL: &quot;</span> <span class="token operator">+</span> response<span class="token punctuation">.</span><span class="token function">ttl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Value: &quot;</span> <span class="token operator">+</span> response<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>There are only one condition that <code>success</code> can be <code>false</code>, and is, when the <code>key</code> doesn&#39;t exist.</p><h3 id="get-disconnected" tabindex="-1"><a class="header-anchor" href="#get-disconnected"><span>Get Disconnected</span></a></h3><p>Once your operations has been finished, you could release resources using:</p><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php"><pre><code class="language-php"><span class="line">service<span class="token operator">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="advanced-usage" tabindex="-1"><a class="header-anchor" href="#advanced-usage"><span>Advanced Usage</span></a></h2><p>I will show you my recommended usages as previous requests are just raw protocol.</p><h3 id="optimized-rate-limiter" tabindex="-1"><a class="header-anchor" href="#optimized-rate-limiter"><span>Optimized Rate Limiter</span></a></h3><p>Avoid the usage of <code>INSERT</code> and <code>UPDATE</code> as two separated requests. Call it as <code>batch</code>.</p><p>The <code>send</code> function also receives <code>List</code>. This reduces two TCP message to only one.</p><p>This mechanism provides to you enough information to <code>allow</code> or <code>block</code> a request.</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">cl<span class="token punctuation">.</span>throttr<span class="token punctuation">.</span>enums<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">cl<span class="token punctuation">.</span>throttr<span class="token punctuation">.</span>requests<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">cl<span class="token punctuation">.</span>throttr<span class="token punctuation">.</span>responses<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token class-name">String</span> <span class="token constant">KEY</span> <span class="token operator">=</span> <span class="token string">&quot;127.0.0.1:8000,GET,/api/user&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">int</span> <span class="token constant">QUOTA</span> <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">int</span> <span class="token constant">TTL</span> <span class="token operator">=</span> <span class="token number">60</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">TTLType</span> <span class="token constant">TTL_TYPE</span> <span class="token operator">=</span> <span class="token class-name">TTLType</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">AttributeType</span> <span class="token constant">ATTRIBUTE_TYPE</span> <span class="token operator">=</span> <span class="token class-name">AttributeType</span><span class="token punctuation">.</span><span class="token constant">QUOTA</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">ChangeType</span> <span class="token constant">CHANGE_TYPE</span> <span class="token operator">=</span> <span class="token class-name">ChangeType</span><span class="token punctuation">.</span><span class="token constant">DECREASE</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">int</span> <span class="token constant">CONSUME</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">StatusResponse</span><span class="token punctuation">&gt;</span></span> responses <span class="token operator">=</span> service<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span></span>
<span class="line">    <span class="token class-name">List</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span></span>
<span class="line">        <span class="token keyword">new</span> <span class="token class-name">InsertRequest</span><span class="token punctuation">(</span></span>
<span class="line">            <span class="token constant">QUOTA</span><span class="token punctuation">,</span></span>
<span class="line">            <span class="token constant">TTL_TYPE</span><span class="token punctuation">,</span></span>
<span class="line">            <span class="token constant">TTL</span><span class="token punctuation">,</span></span>
<span class="line">            <span class="token constant">KEY</span></span>
<span class="line">        <span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token keyword">new</span> <span class="token class-name">UpdateRequest</span><span class="token punctuation">(</span></span>
<span class="line">            <span class="token constant">ATTRIBUTE_TYPE</span><span class="token punctuation">,</span></span>
<span class="line">            <span class="token constant">CHANGE_TYPE</span><span class="token punctuation">,</span></span>
<span class="line">            <span class="token constant">CONSUME</span><span class="token punctuation">,</span></span>
<span class="line">            <span class="token constant">KEY</span></span>
<span class="line">        <span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;INSERT: &quot;</span> <span class="token operator">+</span> responses<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;UPDATE: &quot;</span> <span class="token operator">+</span> responses<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>If <code>INSERT</code> was <code>success</code> then is the first consume time and if <code>UPDATE</code> was <code>success</code> then the user had available quota.</p><p>See more examples in <a href="https://github.com/throttr/java/blob/master/src/test/java/cl/throttr/ServiceTest.java" target="_blank" rel="noopener noreferrer">tests</a>.</p><h2 id="technical-notes" tabindex="-1"><a class="header-anchor" href="#technical-notes"><span>Technical Notes</span></a></h2><ul><li>The protocol assumes Little Endian architecture.</li><li>The internal message queue ensures requests are processed sequentially.</li><li>The package is defined to works with protocol 4.0.17 or greatest.</li></ul><hr><h2 id="license" tabindex="-1"><a class="header-anchor" href="#license"><span>License</span></a></h2><p>Distributed under the <a href="https://github.com/throttr/typescript/blob/master/LICENSE" target="_blank" rel="noopener noreferrer">GNU Affero General Public License v3.0</a>.</p>`,61)]))}const i=n(t,[["render",c]]),u=JSON.parse('{"path":"/sdk/java.html","title":"Java","lang":"en-US","frontmatter":{},"git":{"updatedTime":1747968411000,"contributors":[{"name":"Ian Torres","username":"","email":"iantorres@outlook.com","commits":6}],"changelog":[{"hash":"8349365d921a63eff9b72b5127617a315be16de5","time":1747968411000,"email":"iantorres@outlook.com","author":"Ian Torres","message":"Docs and logo improved."},{"hash":"bc45482333d4e5ba8bc711224ba6d802392bf3f4","time":1747596118000,"email":"iantorres@outlook.com","author":"Ian Torres","message":"Documentation updated."},{"hash":"413c55a3e0aa83f799270d19ab298156deae537c","time":1747226365000,"email":"iantorres@outlook.com","author":"Ian Torres","message":"Docs improved."},{"hash":"cb39ec49192fcbb72dedc3a2861bdccbb6910b1b","time":1747166103000,"email":"iantorres@outlook.com","author":"Ian Torres","message":"Docs updated."},{"hash":"74ea316fa2f0a8ac59f8611e455abd2cc434b55d","time":1747165658000,"email":"iantorres@outlook.com","author":"Ian Torres","message":"Docs added."},{"hash":"4e7c9ffd44426fff5ffbb81849cc10207bbf3f96","time":1747161802000,"email":"iantorres@outlook.com","author":"Ian Torres","message":"Project initialized."}]},"filePathRelative":"sdk/java.md"}');export{i as comp,u as data};
